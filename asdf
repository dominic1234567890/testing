#include "main.h"

/**
 * A callback function for LLEMU's center button.
 *
 * When this callback is fired, it will toggle line 2 of the LCD text between
 * "I was pressed!" and nothing.
 */
void on_center_button() {
	static bool pressed = false;
	pressed = !pressed;
	if (pressed) {
		pros::lcd::set_text(2, "I was pressed!");
		clamp.set_zero_position(5);
	} else {
		pros::lcd::clear_line(2);
	}
}



/**
 * Runs initialization code. This occurs as soon as the program is started.
 *
 * All other competition modes are blocked by initialize; it is recommended
 * to keep execution time for this mode under a few seconds.
 */
void initialize() {
	clamp.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);
	intake.set_brake_mode(pros::E_MOTOR_BRAKE_COAST);
	pros::lcd::initialize();
	pros::lcd::set_text(1, "Hello PROS User!");

	pros::lcd::register_btn1_cb(on_center_button);
}

/**
 * Runs while the robot is in the disabled state of Field Management System or
 * the VEX Competition Switch, following either autonomous or opcontrol. When
 * the robot is enabled, this task will exit.
 */
void disabled() {}

/**
 * Runs after initialize(), and before autonomous when connected to the Field
 * Management System or the VEX Competition Switch. This is intended for
 * competition-specific initialization routines, such as an autonomous selector
 * on the LCD.
 *
 * This task will exit when the robot is enabled and autonomous or opcontrol
 * starts.
 */
void competition_initialize() {}

/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */
void autonomous() {}

/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */

pros::Controller master(pros::E_CONTROLLER_MASTER);
pros::MotorGroup leftBase({1, 3}, pros::v5::MotorGears::green, pros::v5::MotorEncoderUnits::rotations);    // Creates a motor group with forwards ports 1 & 3 and reversed port 2
pros::MotorGroup rightBase({4, 6}, pros::v5::MotorGears::green, pros::v5::MotorEncoderUnits::rotations);
pros::Motor clamp(9, pros::v5::MotorGears::red,pros::v5::MotorEncoderUnits::degrees);
pros::Motor intake(10, pros::v5::MotorGears::blue,pros::v5::MotorEncoderUnits::rotations);


bool isTank = true;
bool isClamping = false;

void clampControl(float degrees, int clampSpeed){ //Input is in degrees
	if((master.get_digital(E_CONTROLLER_DIGITAL_L1))){
		isClamping = !isClamping;
		double target = isClamping ? degrees : 0;
		clamp.move_absolute(target,clampSpeed);
	}


}

void UpdateDrive(int a, int b,float k, bool tank) {
 
	float adjustedLeft = static_cast<float>(a) / 127.0;
	float adjustedRight = static_cast<float>(b) / 127.0;
	float lb = 127*((k*adjustedLeft) + ((1-k)*pow(adjustedLeft,3)));
	float rb = 127*((k*adjustedRight) + ((1-k)*pow(adjustedRight,3)));

	int lbconvert = static_cast<int>(lb);
	int rbconvert = static_cast<int>(rb);


	if(tank == true){
		leftBase.move(lbconvert);
	    rightBase.move(rbconvert);
	}else if(tank == false){
		leftBase.move(lbconvert + rbconvert);
		rightBase.move(lbconvert - rbconvert);
	}

	
	
	}



void opcontrol() {
	

	

	






	
	while (true) {
		//pros::lcd::print(0, "%d %d %d", (pros::lcd::read_buttons() & LCD_BTN_LEFT) >> 2,
		//                 (pros::lcd::read_buttons() & LCD_BTN_CENTER) >> 1,
		//                 (pros::lcd::read_buttons() & LCD_BTN_RIGHT) >> 0);  // Prints status of the emulated screen LCDs
		
		// Arcade control scheme
		float tankleftInput = master.get_analog(ANALOG_LEFT_Y);    // Gets amount forward/backward from left joystick
		float tankrightInput = master.get_analog(ANALOG_RIGHT_Y);
		float arcadeleftInput = master.get_analog(ANALOG_LEFT_Y);  // Gets the turn left/right from right joystick
		float arcaderightInput = master.get_analog(ANALOG_RIGHT_X);

		int leftInput = isTank ? tankleftInput : arcadeleftInput;
		int rightInput = isTank ? tankrightInput : arcaderightInput;

		clampControl(350,80);
		
		UpdateDrive(leftInput,rightInput,0.5, isTank);
		//leftBase.move(dir - turn);                      // Sets left motor voltage
		//rightBase.move(dir + turn);                     // Sets right motor voltage
		
		pros::delay(20);                               // Run for 20 ms then update
		
	}
}
